// DOM Elements 
let inputDir = { x: 0, y: 0 };
// Here , this is this instance for storing the HTMl audio element 
const foodSound = new Audio('../music/food.mp3');
const gameOverSound = new Audio('../music/gameover.mp3');
const moveSound = new Audio('../music/move.mp3');
const musicSound = new Audio('../music/music.mp3');
let speed = 5;
let score = 0 ;
// Here , lastPaintTime refers to the time when last time our page was rendered
let lastPaintTime = 0;
let snakeArr = [
     { x: 13, y: 15 }
];
let food = { x: 6 , y: 7 } ;

// Game Functions 
// Here , normally the speed is 60Hz which is 60 frames per second
// Here , we refere our speed as fps which is frames per second which is equal to the number of activity done per second
// Function to rerender the page in every 0.5 seconds 
function main(ctime) {
     window.requestAnimationFrame(main);
     // console.log(ctime);
     if ((ctime - lastPaintTime) / 1000 < 1 / speed) {
          return;
     }
     lastPaintTime = ctime;
     gameEngine();
}

function isCollide( snake ) {
     // If the snake eats itself 
     for(let i = 1 ; i < snake.length ; i++) {
          if( snake[i].x === snake[0].x && snake[i].y === snake[0].y ) {
               return true;
          }
     }

     // If we collide with wall

     if(snake[0].x  >= 18 || snake[0].x <= 1 || snake[0].y  >= 18 || snake[0].y <= 1 ) {
          return true;
     }

}

function gameEngine() {

     // Part 1 : Updating the snake array and also the food array
     if( isCollide(snakeArr) ) {
          gameOverSound.play() ;
          musicSound.pause() ;
          // Resetting the direction
          inputDir = { x :0 , y :0 } ;
          alert("Game Over. Press any key to restart the game ") ;
          // Resetting the snake array
          snakeArr = [ { x: 13, y: 15 } ] ;
          // musicSound.play() ;
          score = 0 ;
     }

     // If the snake has eaten the food then we have to increase the score and regenerate the food 
     if( snakeArr[0].y == food.y && snakeArr[0].x == food.x ) {
          foodSound.play() ;
          score = score + 1 ;
          if( score > hiscoreVal ) {
               hiscoreVal = score ;
               localStorage.setItem('hiscore' , JSON.stringify(hiscoreVal) ) ;
               highscoreBox.innerHTML = "High Score: " + hiscoreVal ;
          }
          scoreBox.innerHTML = "Score: " + score ;
          // Increasing the size of the snake when it has eaten the food
          snakeArr.unshift( { x : snakeArr[0].x + inputDir.x ,  y : snakeArr[0].y + inputDir.y } )
          let a = 2;
          let b = 16;
          food = { x : Math.round( a + ( b - a )* Math.random() ) ,  y : Math.round( a + ( b - a )* Math.random() ) }
     }

     // Moving the snake 
     for (let index = snakeArr.length - 2 ; index >= 0 ; index--) {
          // Here , since we have to change the value at the respective index so we we have to use the rest operator not the variable which contains the reference
          snakeArr[index + 1] = { ...snakeArr[index] } ;
     }

     snakeArr[0].x += inputDir.x ;
     snakeArr[0].y += inputDir.y ;

     // Part 2 : Display the snake and Food
     // Display the snake
     board.innerHTML = "";
     snakeArr.forEach((e, index) => {
          snakeElement = document.createElement('div');
          // Here, in both of the cases if the end is not mentioned it considers it's end to it next row-line or column-line
          snakeElement.style.gridRowStart = e.y;
          snakeElement.style.gridColumnStart = e.x;
          // snakeElement.style.gridColumnEnd = e.x;
          if(index == 0) {
               snakeElement.classList.add('head');
          } else {
               snakeElement.classList.add('snake');
          }
          board.appendChild(snakeElement);
     });

     // Display the food
     foodElement = document.createElement('div');
     foodElement.style.gridRowStart = food.y;
     foodElement.style.gridColumnStart = food.x;
     foodElement.classList.add('food');
     board.appendChild(foodElement);

}

// In every game the most thing is the game loop 
// For the game loop

// Main logic of the game 
let hiscore = localStorage.getItem('hiscore');
if(hiscore == null) {
     hiscoreVal = 0 ;
     localStorage.setItem('hiscore', JSON.stringify(hiscoreVal) )  ;
}
else {
     hiscoreVal = JSON.parse(hiscore) ;
     highscoreBox.innerHTML = "High Score: " + hiscore ;
}

window.requestAnimationFrame(main);

window.addEventListener('keydown', e => {
     // Starting the game if any key is pressed
     // At first when the game will start our snake will will move the downwards direction from the top left corner of the board that we have assigned
     inputDir = { x : 0 , y : 1 }     
     moveSound.play();

     switch (e.key) {

          // Snake will move in the upwards direction
          case "ArrowUp":
               console.log("ArrowUp") ;
               inputDir.x = 0;
               inputDir.y = -1;
               break;

          // Snake will move in the downwards direction
          case "ArrowDown":
               console.log("ArrowDown") ;
               inputDir.x = 0;
               inputDir.y = 1;
               break;

          // Snake will move in the left direction
          case "ArrowLeft":
               console.log("ArrowLeft") ;
               inputDir.x = -1;
               inputDir.y = 0;
               break;

          // Snake will move in the right direction
          case "ArrowRight":
               console.log("ArrowRight") ;
               inputDir.x = 1;
               inputDir.y = 0;
               break;

          default:
               break;
     }
}) ;

----------------------------------------------------------------------------------------------------------------------

// Game Constants & Variables
let inputDir = {x: 0, y: 0}; 
const foodSound = new Audio('music/food.mp3');
const gameOverSound = new Audio('music/gameover.mp3');
const moveSound = new Audio('music/move.mp3');
const musicSound = new Audio('music/music.mp3');
let highscoreBox = document.querySelector('#highscoreBox');
let hiscoreval = 0 ;
let speed = 19;
let score = 0;
let lastPaintTime = 0;
let snakeArr = [
    {x: 13, y: 15}
];

food = {x: 6, y: 7};

// Game Functions
function main(ctime) {
    window.requestAnimationFrame(main);
    // console.log(ctime)
    if((ctime - lastPaintTime)/1000 < 1/speed){
        return;
    }
    lastPaintTime = ctime;
    gameEngine();
}

function isCollide(snake) {
    // If you bump into yourself 
    for (let i = 1; i < snakeArr.length; i++) {
        if(snake[i].x === snake[0].x && snake[i].y === snake[0].y){
            return true;
        }
    }
    // If you bump into the wall
    if(snake[0].x >= 18 || snake[0].x <=0 || snake[0].y >= 18 || snake[0].y <=0){
        return true;
    }
        
    return false;
}

function gameEngine(){
    // Part 1: Updating the snake array & Food
    if(isCollide(snakeArr)){
        gameOverSound.play();
        musicSound.pause();
        inputDir =  {x: 0, y: 0}; 
        alert("Game Over. Press any key to play again!");
        snakeArr = [{x: 13, y: 15}];
        musicSound.play();
        score = 0; 
    }

    // If you have eaten the food, increment the score and regenerate the food
    if(snakeArr[0].y === food.y && snakeArr[0].x ===food.x){
        foodSound.play();
        score += 1;
        if(score>hiscoreval){
            hiscoreval = score;
            localStorage.setItem("hiscore", JSON.stringify(hiscoreval));
            highscoreBox.innerHTML = "HiScore: " + hiscoreval;
        }
        scoreBox.innerHTML = "Score: " + score;
        snakeArr.unshift({x: snakeArr[0].x + inputDir.x, y: snakeArr[0].y + inputDir.y});
        let a = 2;
        let b = 16;
        food = {x: Math.round(a + (b-a)* Math.random()), y: Math.round(a + (b-a)* Math.random())}
    }

    // Moving the snake
    for (let i = snakeArr.length - 2; i>=0; i--) { 
        snakeArr[i+1] = {...snakeArr[i]};
    }

    snakeArr[0].x += inputDir.x;
    snakeArr[0].y += inputDir.y;

    // Part 2: Display the snake and Food
    // Display the snake
    board.innerHTML = "";
    snakeArr.forEach((e, index)=>{
        snakeElement = document.createElement('div');
        snakeElement.style.gridRowStart = e.y;
        snakeElement.style.gridColumnStart = e.x;

        if(index === 0){
            snakeElement.classList.add('head');
        }
        else{
            snakeElement.classList.add('snake');
        }
        board.appendChild(snakeElement);
    });
    // Display the food
    foodElement = document.createElement('div');
    foodElement.style.gridRowStart = food.y;
    foodElement.style.gridColumnStart = food.x;
    foodElement.classList.add('food')
    board.appendChild(foodElement);


}


// Main logic starts here
musicSound.play();
let hiscore = localStorage.getItem("hiscore");
if(hiscore === null){
    hiscoreval = 0;
    localStorage.setItem("hiscore", JSON.stringify(hiscoreval))
}
else{
    hiscoreval = JSON.parse(hiscore);
    highscoreBox.innerHTML = "HiScore: " + hiscore;
}

window.requestAnimationFrame(main);
window.addEventListener('keydown', e =>{
    inputDir = {x: 0, y: 1} // Start the game
    moveSound.play();
    switch (e.key) {
        case "ArrowUp":
            console.log("ArrowUp");
            inputDir.x = 0;
            inputDir.y = -1;
            break;

        case "ArrowDown":
            console.log("ArrowDown");
            inputDir.x = 0;
            inputDir.y = 1;
            break;

        case "ArrowLeft":
            console.log("ArrowLeft");
            inputDir.x = -1;
            inputDir.y = 0;
            break;

        case "ArrowRight":
            console.log("ArrowRight");
            inputDir.x = 1;
            inputDir.y = 0;
            break;
        default:
            break;
    }

});